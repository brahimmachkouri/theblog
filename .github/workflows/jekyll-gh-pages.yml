name: Deploy Jekyll manually to gh-pages branch

on:
  push:
    branches: ["main"]
    # Optionnel : pour √©viter les boucles si d'autres actions poussent sur main
    # if: "!contains(github.event.head_commit.message, 'Auto: minify CSS')" # √Ä adapter
  workflow_dispatch:

permissions:
  contents: write  # n√©cessaire pour pouvoir push sur gh-pages

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1' # Ou la version sp√©cifi√©e dans votre Gemfile si vous en avez un
          bundler-cache: true # Installer/mettre en cache les gems de votre Gemfile

      - name: Build Jekyll site
        run: bundle exec jekyll build --source ./ --destination ./_site
        env:
          JEKYLL_ENV: production # Important pour un build de production

      - name: V√©rification du dossier _site
        run: |
          echo "::group::Contenu de _site"
          ls -la ./_site
          echo "::endgroup::"

      - name: V√©rification des liens (lychee)
        uses: lycheeverse/lychee-action@v1
        with:
          args: --no-progress --verbose ./_site
        # continue-on-error: true # D√©commenter pour d√©ployer m√™me si des liens sont cass√©s

      - name: Upload site artifact
        uses: actions/upload-artifact@v4
        with:
          name: jekyll-site
          path: ./_site

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      # Pas besoin de checkout la source ici, car on va op√©rer sur l'artefact
      # - name: Checkout source
      #   uses: actions/checkout@v4

      - name: Download site artifact
        uses: actions/download-artifact@v4
        with:
          name: jekyll-site
          path: ./deploy_dir # T√©l√©charge dans un dossier temporaire, par ex. deploy_dir

      # Option A: Utiliser votre script Git manuel (devrait fonctionner)
      # - name: Init git et push vers gh-pages
      #   run: |
      #     cd deploy_dir # Aller dans le dossier avec le site construit
      #     touch .nojekyll  # D√©sactive le traitement Jekyll c√¥t√© GitHub Pages
      #     git init
      #     git config user.name "github-actions[bot]"
      #     git config user.email "github-actions[bot]@users.noreply.github.com"
      #     git add .
      #     git commit -m "üöÄ D√©ploiement manuel vers gh-pages"
      #     git branch -M gh-pages
      #     # Utiliser GITHUB_REPOSITORY est plus s√ªr que github.repository qui peut ne pas √™tre peupl√© ici
      #     git remote add origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ env.GITHUB_REPOSITORY }}.git
      #     git push --force origin gh-pages
      #   env:
      #     GITHUB_REPOSITORY: ${{ github.repository }}

      # Option B: Utiliser une action d√©di√©e pour le d√©ploiement gh-pages (recommand√©)
      - name: Deploy to GitHub Pages branch
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./deploy_dir # Le dossier contenant le contenu de _site
          publish_branch: gh-pages
          force_orphan: true # Cr√©e une branche gh-pages avec un historique propre
          user_name: 'github-actions[bot]'
          user_email: 'github-actions[bot]@users.noreply.github.com'
          commit_message: 'üöÄ D√©ploiement vers gh-pages'
          # .nojekyll est g√©n√©ralement ajout√© par cette action si n√©cessaire
